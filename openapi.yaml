openapi: 3.0.3
info:
  title: StudentHub Dashboard API
  description: |
    A comprehensive REST API for managing student records with analytics capabilities.
    Built with Next.js 15, Supabase, and TypeScript for modern web applications.
  version: 1.0.0
  contact:
    name: StudentHub API Support
    email: support@studenthub.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://v0-student-hub-dashboard.vercel.app
    description: Production server

paths:
  /api/students:
    get:
      summary: Get all students
      description: Retrieve a list of all students with optional filtering and pagination
      tags:
        - Students
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of students per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: course
          in: query
          description: Filter by course name
          required: false
          schema:
            type: string
            enum: [Computer Science, AI, Biology, Mathematics, Physics, Chemistry, Engineering]
      responses:
        '200':
          description: Successfully retrieved students
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
                  error:
                    type: null
              examples:
                success:
                  value:
                    data:
                      - id: "123e4567-e89b-12d3-a456-426614174000"
                        name: "Alice Johnson"
                        age: 22
                        course: "Computer Science"
                        created_at: "2024-01-15T10:30:00Z"
                      - id: "123e4567-e89b-12d3-a456-426614174001"
                        name: "Bob Smith"
                        age: 20
                        course: "Mathematics"
                        created_at: "2024-01-14T09:15:00Z"
                    error: null
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new student
      description: Add a new student to the database with validation
      tags:
        - Students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
            examples:
              valid_student:
                value:
                  name: "Carol Davis"
                  age: 21
                  course: "Physics"
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Student'
                  error:
                    type: null
              examples:
                success:
                  value:
                    data:
                      id: "123e4567-e89b-12d3-a456-426614174002"
                      name: "Carol Davis"
                      age: 21
                      course: "Physics"
                      created_at: "2024-01-16T14:20:00Z"
                    error: null
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_name:
                  value:
                    data: null
                    error: "Name is required and must not be empty"
                invalid_age:
                  value:
                    data: null
                    error: "Age must be between 1 and 100"
                invalid_course:
                  value:
                    data: null
                    error: "Course must be one of the available options"

  /api/students/{id}:
    get:
      summary: Get student by ID
      description: Retrieve a specific student by their unique identifier
      tags:
        - Students
      parameters:
        - name: id
          in: path
          required: true
          description: Student unique identifier
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Student'
                  error:
                    type: null
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update student
      description: Update an existing student's information
      tags:
        - Students
      parameters:
        - name: id
          in: path
          required: true
          description: Student unique identifier
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Student'
                  error:
                    type: null
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete student
      description: Remove a student from the database
      tags:
        - Students
      parameters:
        - name: id
          in: path
          required: true
          description: Student unique identifier
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Student deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Student deleted successfully"
                  error:
                    type: null
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/students/search:
    get:
      summary: Search students
      description: Search and filter students by various criteria
      tags:
        - Students
      parameters:
        - name: q
          in: query
          description: Search query for student name
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: course
          in: query
          description: Filter by course
          required: false
          schema:
            type: string
            enum: [Computer Science, AI, Biology, Mathematics, Physics, Chemistry, Engineering]
        - name: min_age
          in: query
          description: Minimum age filter
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: max_age
          in: query
          description: Maximum age filter
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: sort_by
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            enum: [name, age, course, created_at]
            default: created_at
        - name: sort_order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
                  error:
                    type: null
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      query:
                        type: string
                      filters:
                        type: object
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/analytics/overview:
    get:
      summary: Get analytics overview
      description: Retrieve comprehensive analytics data for the dashboard
      tags:
        - Analytics
      responses:
        '200':
          description: Analytics data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      totalStudents:
                        type: integer
                        description: Total number of students
                      averageAge:
                        type: number
                        format: float
                        description: Average age of all students
                      mostPopularCourse:
                        type: string
                        description: Course with the most students
                      courseDistribution:
                        type: array
                        items:
                          type: object
                          properties:
                            course:
                              type: string
                            count:
                              type: integer
                            percentage:
                              type: number
                              format: float
                      ageDistribution:
                        type: object
                        additionalProperties:
                          type: integer
                      recentGrowth:
                        type: object
                        properties:
                          thisMonth:
                            type: integer
                          lastMonth:
                            type: integer
                          growthRate:
                            type: number
                            format: float
                  error:
                    type: null
              examples:
                success:
                  value:
                    data:
                      totalStudents: 150
                      averageAge: 21.5
                      mostPopularCourse: "Computer Science"
                      courseDistribution:
                        - course: "Computer Science"
                          count: 45
                          percentage: 30.0
                        - course: "Mathematics"
                          count: 30
                          percentage: 20.0
                        - course: "Physics"
                          count: 25
                          percentage: 16.7
                      ageDistribution:
                        "18": 15
                        "19": 25
                        "20": 35
                        "21": 30
                        "22": 25
                        "23": 20
                      recentGrowth:
                        thisMonth: 12
                        lastMonth: 8
                        growthRate: 50.0
                    error: null

  /api/analytics/courses:
    get:
      summary: Get course distribution
      description: Retrieve detailed course distribution statistics
      tags:
        - Analytics
      responses:
        '200':
          description: Course distribution data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        course:
                          type: string
                        count:
                          type: integer
                        percentage:
                          type: number
                          format: float
                        averageAge:
                          type: number
                          format: float
                  error:
                    type: null

  /api/analytics/age-groups:
    get:
      summary: Get age group distribution
      description: Retrieve age group distribution statistics
      tags:
        - Analytics
      responses:
        '200':
          description: Age group distribution data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      "18-20":
                        type: integer
                      "21-23":
                        type: integer
                      "24-26":
                        type: integer
                      "27+":
                        type: integer
                  error:
                    type: null

  /api/health:
    get:
      summary: Health check
      description: Check API health status
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

components:
  schemas:
    Student:
      type: object
      required:
        - id
        - name
        - age
        - course
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the student
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Student's full name
          example: "Alice Johnson"
        age:
          type: integer
          minimum: 1
          maximum: 100
          description: Student's age in years
          example: 22
        course:
          type: string
          enum: [Computer Science, AI, Biology, Mathematics, Physics, Chemistry, Engineering]
          description: Student's enrolled course
          example: "Computer Science"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the student was created
          example: "2024-01-15T10:30:00Z"

    CreateStudentRequest:
      type: object
      required:
        - name
        - age
        - course
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Student's full name
          example: "Alice Johnson"
        age:
          type: integer
          minimum: 1
          maximum: 100
          description: Student's age in years
          example: 22
        course:
          type: string
          enum: [Computer Science, AI, Biology, Mathematics, Physics, Chemistry, Engineering]
          description: Student's enrolled course
          example: "Computer Science"

    UpdateStudentRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Student's full name
          example: "Alice Johnson"
        age:
          type: integer
          minimum: 1
          maximum: 100
          description: Student's age in years
          example: 22
        course:
          type: string
          enum: [Computer Science, AI, Biology, Mathematics, Physics, Chemistry, Engineering]
          description: Student's enrolled course
          example: "Computer Science"

    Error:
      type: object
      required:
        - data
        - error
      properties:
        data:
          type: null
          description: Always null for error responses
        error:
          type: string
          description: Error message describing what went wrong
          example: "Validation failed: Name is required"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

tags:
  - name: Students
    description: Student management operations
  - name: Analytics
    description: Analytics and reporting endpoints
  - name: System
    description: System health and status endpoints
